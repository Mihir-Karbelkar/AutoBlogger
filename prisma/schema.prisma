datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String     @id @default(uuid())
  name                  String
  email                 String?    @unique
  emailVerified         DateTime?   @map("email_verified")
  image                 String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  accounts              Account[]
  sessions              Session[]
  password              String?
  blogs   BlogPost[]
  categories Category[]
}
model Account {
  id                 String    @id @default(cuid())
  userId              String   
  type                 String?
  provider           String
  providerAccountId  String    @map("provider_account_id")
  token_type         String?
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  scope              String?
  id_token           String? @db.Text
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  
  sessionToken String   @db.Text @unique
  accessToken  String?  @db.Text 
  expires      DateTime
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model BlogPost {
  id String @id @default(cuid())
  content String?
  userId String
  categoryId String
  author User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  keywords Keyword[]
  topic String
  recommended Boolean? @default(false)
  fetched Boolean?
}

model Keyword{
  id String @id @default(cuid())
  key String @unique
  blogPosts BlogPost[]
} 

model Category{
  id String @id @default(cuid())
  name String
  blogs BlogPost[]
  fetched Boolean?
    userId String
  author User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([name, userId])
}
